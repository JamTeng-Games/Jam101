// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(System.Collections.Generic.KeyValuePair<EAttributeType, FP>))]
  public unsafe class DictionaryEntry_EAttributeType_FP : Quantum.Prototypes.DictionaryEntry {
    public Quantum.QEnum32<EAttributeType> Key;
    public FP Value;
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.AttributesComp))]
  public unsafe partial class AttributesCompPrototype : ComponentPrototype<Quantum.AttributesComp> {
    [DictionaryAttribute()]
    [DynamicCollectionAttribute()]
    public DictionaryEntry_EAttributeType_FP[] BaseAttribs = {};
    [DictionaryAttribute()]
    [DynamicCollectionAttribute()]
    public DictionaryEntry_EAttributeType_FP[] PercentAttribs = {};
    partial void MaterializeUser(Frame frame, ref Quantum.AttributesComp result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.AttributesComp component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.AttributesComp result, in PrototypeMaterializationContext context = default) {
        if (this.BaseAttribs.Length == 0) {
          result.BaseAttribs = default;
        } else {
          var dict = frame.AllocateDictionary(out result.BaseAttribs, this.BaseAttribs.Length);
          for (int i = 0; i < this.BaseAttribs.Length; ++i) {
            Quantum.EAttributeType tmpKey = default;
            FP tmpValue = default;
            tmpKey = this.BaseAttribs[i].Key;
            tmpValue = this.BaseAttribs[i].Value;
            PrototypeValidator.AddToDictionary(dict, tmpKey, tmpValue, in context);
          }
        }
        if (this.PercentAttribs.Length == 0) {
          result.PercentAttribs = default;
        } else {
          var dict = frame.AllocateDictionary(out result.PercentAttribs, this.PercentAttribs.Length);
          for (int i = 0; i < this.PercentAttribs.Length; ++i) {
            Quantum.EAttributeType tmpKey = default;
            FP tmpValue = default;
            tmpKey = this.PercentAttribs[i].Key;
            tmpValue = this.PercentAttribs[i].Value;
            PrototypeValidator.AddToDictionary(dict, tmpKey, tmpValue, in context);
          }
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    public FPVector2 MovementDirection;
    public FPVector2 AttackDirection;
    public FP AttackDistance;
    public FPVector2 SkillDirection;
    public FP SkillDistance;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        result.MovementDirection = this.MovementDirection;
        result.AttackDirection = this.AttackDirection;
        result.AttackDistance = this.AttackDistance;
        result.SkillDirection = this.SkillDirection;
        result.SkillDistance = this.SkillDistance;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.InputComp))]
  public unsafe partial class InputCompPrototype : ComponentPrototype<Quantum.InputComp> {
    [HideInInspector()]
    public Quantum.Prototypes.InputPrototype Input;
    partial void MaterializeUser(Frame frame, ref Quantum.InputComp result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.InputComp component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.InputComp result, in PrototypeMaterializationContext context = default) {
        this.Input.Materialize(frame, ref result.Input, in context);
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerData))]
  public unsafe partial class PlayerDataPrototype : StructPrototype {
    public PlayerRef PlayerRef;
    public FP RespawnTimer;
    public Int32 Kills;
    public Int32 Deaths;
    public Int32 LastKillFrame;
    public Int32 StatisticPosition;
    public QBoolean IsAlive;
    public QBoolean IsConnected;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.PlayerData result, in PrototypeMaterializationContext context = default) {
        result.PlayerRef = this.PlayerRef;
        result.RespawnTimer = this.RespawnTimer;
        result.Kills = this.Kills;
        result.Deaths = this.Deaths;
        result.LastKillFrame = this.LastKillFrame;
        result.StatisticPosition = this.StatisticPosition;
        result.IsAlive = this.IsAlive;
        result.IsConnected = this.IsConnected;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerLinkComp))]
  public unsafe partial class PlayerLinkCompPrototype : ComponentPrototype<Quantum.PlayerLinkComp> {
    public PlayerRef PlayerRef;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerLinkComp result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerLinkComp component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerLinkComp result, in PrototypeMaterializationContext context = default) {
        result.PlayerRef = this.PlayerRef;
        MaterializeUser(frame, ref result, in context);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
