// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public enum EGameState : int {
    None,
    CharacterSelection,
    Playing,
    Over,
  }
  public enum EStateType : int {
    Idle,
    Move,
    Attack,
    Stun,
    Die,
    Skill,
  }
  public enum ETLNodeType : int {
    None,
    Log,
    AddBuffToCaster,
    PlayAnim,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    Attack = 1 << 0,
    Skill = 1 << 1,
  }
  public static unsafe partial class FlagsExtensions {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length, "Invalid array size", values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4463;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length, "Invalid array size", values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3319;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length, "Invalid array size", values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14057;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length, "Invalid array size", values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1433;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length, "Invalid array size", values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17491;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length, "Invalid array size", values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13669;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [System.SerializableAttribute()]
  public unsafe partial struct QString64 : IQString, System.IEquatable<QString64> {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public UInt16 ByteCount;
    [FieldOffset(2)]
    [FixedBufferDynamicLength("ByteCount")]
    public fixed Byte Bytes[62];
    public const int MaxByteCount = 62;
    public QString64(String str) {
      QString.ConstructFrom(str, MaxByteCount, out this);
    }
    public int Length {
      get {
        return QString.GetLength(ref this);
      }
    }
    public override System.String ToString() {
      return QString.GetString(ref this);
    }
    public static Boolean CanHold(String str) {
      return QString.CanHold(str, MaxByteCount);
    }
    Int32 IQString.CompareOrdinal(byte* bytes, UInt16 byteCount) {
      return QString.CompareOrdinal(ref this, bytes, byteCount);
    }
    public Int32 CompareOrdinal(String str) {
      return QString.CompareOrdinal(ref this, str);
    }
    public static implicit operator QString64(String str) {
      return new QString64(str);
    }
    public static implicit operator String(QString64 str) {
      return str.ToString();
    }
    public override Boolean Equals(Object obj) {
      return QString.AreEqual(ref this, obj);
    }
    public Boolean Equals(QString64 str) {
      return QString.CompareOrdinal(ref this, str.Bytes, str.ByteCount) == 0;
    }
    public Boolean Equals<T>(ref T str)
      where T : unmanaged, IQString {
      return QString.CompareOrdinal(ref this, ref str) == 0;
    }
    public Int32 CompareOrdinal<T>(ref T str)
      where T : unmanaged, IQString {
      return QString.CompareOrdinal(ref this, ref str);
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13649;
        hash = hash * 31 + ByteCount.GetHashCode();
        fixed (Byte* p = Bytes) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, this.ByteCount);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QString64*)ptr;
        serializer.Stream.Serialize(&p->ByteCount);
        Assert.Always(p->ByteCount <= 62, p->ByteCount);
        serializer.Stream.SerializeBuffer(&p->Bytes[0], p->ByteCount);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AddBuffInfo {
    public const Int32 SIZE = 80;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(12)]
    public QBoolean isPermanent;
    [FieldOffset(8)]
    public QBoolean isDurationSetTo;
    [FieldOffset(0)]
    public Int32 addStack;
    [FieldOffset(4)]
    public Int32 duration;
    [FieldOffset(16)]
    public EntityRef caster;
    [FieldOffset(24)]
    public EntityRef target;
    [FieldOffset(32)]
    public BuffModel buffModel;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7043;
        hash = hash * 31 + isPermanent.GetHashCode();
        hash = hash * 31 + isDurationSetTo.GetHashCode();
        hash = hash * 31 + addStack.GetHashCode();
        hash = hash * 31 + duration.GetHashCode();
        hash = hash * 31 + caster.GetHashCode();
        hash = hash * 31 + target.GetHashCode();
        hash = hash * 31 + buffModel.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      buffModel.ClearPointers(f, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AddBuffInfo*)ptr;
        serializer.Stream.Serialize(&p->addStack);
        serializer.Stream.Serialize(&p->duration);
        QBoolean.Serialize(&p->isDurationSetTo, serializer);
        QBoolean.Serialize(&p->isPermanent, serializer);
        EntityRef.Serialize(&p->caster, serializer);
        EntityRef.Serialize(&p->target, serializer);
        Quantum.BuffModel.Serialize(&p->buffModel, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AttributeCost {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 attrType;
    [FieldOffset(4)]
    public Int32 cost;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 283;
        hash = hash * 31 + attrType.GetHashCode();
        hash = hash * 31 + cost.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AttributeCost*)ptr;
        serializer.Stream.Serialize(&p->attrType);
        serializer.Stream.Serialize(&p->cost);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BM_AutoReload {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 reloadFrame;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5869;
        hash = hash * 31 + reloadFrame.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_AutoReload*)ptr;
        serializer.Stream.Serialize(&p->reloadFrame);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BM_Dash {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP distance;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12911;
        hash = hash * 31 + distance.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_Dash*)ptr;
        FP.Serialize(&p->distance, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BM_DisableMove {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4409;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_DisableMove*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BM_DisableMove_NoEffect {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7549;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_DisableMove_NoEffect*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BM_DisableSkill {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10859;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_DisableSkill*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BM_Hot {
    public const Int32 SIZE = 6;
    public const Int32 ALIGNMENT = 2;
    [FieldOffset(2)]
    public Int16 tick;
    [FieldOffset(4)]
    public UInt16 area;
    [FieldOffset(0)]
    public Int16 damage;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14653;
        hash = hash * 31 + tick.GetHashCode();
        hash = hash * 31 + area.GetHashCode();
        hash = hash * 31 + damage.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_Hot*)ptr;
        serializer.Stream.Serialize(&p->damage);
        serializer.Stream.Serialize(&p->tick);
        serializer.Stream.Serialize(&p->area);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BM_Poison {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18503;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_Poison*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BM_PureAttrib {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10909;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_PureAttrib*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BM_Test1 {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12043;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_Test1*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BuffModel {
    public const Int32 SIZE = 48;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(12)]
    public Int32 type;
    [FieldOffset(8)]
    public Int32 priority;
    [FieldOffset(4)]
    public Int32 maxStack;
    [FieldOffset(0)]
    public Int32 interval;
    [FieldOffset(20)]
    public QDictionaryPtr<Int32, Int32> valueAttribs;
    [FieldOffset(16)]
    public QDictionaryPtr<Int32, FP> percentAttribs;
    [FieldOffset(24)]
    public QListPtr<Int32> tags;
    [FieldOffset(32)]
    public BM_Instance instance;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21407;
        hash = hash * 31 + type.GetHashCode();
        hash = hash * 31 + priority.GetHashCode();
        hash = hash * 31 + maxStack.GetHashCode();
        hash = hash * 31 + interval.GetHashCode();
        hash = hash * 31 + valueAttribs.GetHashCode();
        hash = hash * 31 + percentAttribs.GetHashCode();
        hash = hash * 31 + tags.GetHashCode();
        hash = hash * 31 + instance.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      valueAttribs = default;
      percentAttribs = default;
      tags = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BuffModel*)ptr;
        serializer.Stream.Serialize(&p->interval);
        serializer.Stream.Serialize(&p->maxStack);
        serializer.Stream.Serialize(&p->priority);
        serializer.Stream.Serialize(&p->type);
        QDictionary.Serialize(&p->percentAttribs, serializer, Statics.SerializeInt32, Statics.SerializeFP);
        QDictionary.Serialize(&p->valueAttribs, serializer, Statics.SerializeInt32, Statics.SerializeInt32);
        QList.Serialize(&p->tags, serializer, Statics.SerializeInt32);
        Quantum.BM_Instance.Serialize(&p->instance, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BuffObj {
    public const Int32 SIZE = 88;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public QBoolean isPermanent;
    [FieldOffset(4)]
    public Int32 remainFrame;
    [FieldOffset(8)]
    public Int32 stack;
    [FieldOffset(0)]
    public Int32 elapsedFrame;
    [FieldOffset(12)]
    public Int32 tickTimes;
    [FieldOffset(24)]
    public EntityRef caster;
    [FieldOffset(32)]
    public EntityRef owner;
    [FieldOffset(40)]
    public BuffModel model;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 11197;
        hash = hash * 31 + isPermanent.GetHashCode();
        hash = hash * 31 + remainFrame.GetHashCode();
        hash = hash * 31 + stack.GetHashCode();
        hash = hash * 31 + elapsedFrame.GetHashCode();
        hash = hash * 31 + tickTimes.GetHashCode();
        hash = hash * 31 + caster.GetHashCode();
        hash = hash * 31 + owner.GetHashCode();
        hash = hash * 31 + model.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      model.ClearPointers(f, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BuffObj*)ptr;
        serializer.Stream.Serialize(&p->elapsedFrame);
        serializer.Stream.Serialize(&p->remainFrame);
        serializer.Stream.Serialize(&p->stack);
        serializer.Stream.Serialize(&p->tickTimes);
        QBoolean.Serialize(&p->isPermanent, serializer);
        EntityRef.Serialize(&p->caster, serializer);
        EntityRef.Serialize(&p->owner, serializer);
        Quantum.BuffModel.Serialize(&p->model, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DataContainer {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QDictionaryPtr<Int32, Variable> Data;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19541;
        hash = hash * 31 + Data.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Data = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DataContainer*)ptr;
        QDictionary.Serialize(&p->Data, serializer, Statics.SerializeInt32, Statics.SerializeVariable);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(40)]
    public FPVector2 MoveDirection;
    [FieldOffset(0)]
    public Button Attack;
    [FieldOffset(24)]
    public FPVector2 AttackScreenPos;
    [FieldOffset(12)]
    public Button Skill;
    [FieldOffset(56)]
    public FPVector2 SkillScreenPos;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19249;
        hash = hash * 31 + MoveDirection.GetHashCode();
        hash = hash * 31 + Attack.GetHashCode();
        hash = hash * 31 + AttackScreenPos.GetHashCode();
        hash = hash * 31 + Skill.GetHashCode();
        hash = hash * 31 + SkillScreenPos.GetHashCode();
        return hash;
      }
    }
    static partial void GetMaxCountCodeGen(ref int maxCount) {
      maxCount = 6;
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons.Attack: return Attack.IsDown;
        case InputButtons.Skill: return Skill.IsDown;
        default: return false;
      }
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons.Attack: return Attack.WasPressed;
        case InputButtons.Skill: return Skill.WasPressed;
        default: return false;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        Button.Serialize(&p->Attack, serializer);
        Button.Serialize(&p->Skill, serializer);
        FPVector2.Serialize(&p->AttackScreenPos, serializer);
        FPVector2.Serialize(&p->MoveDirection, serializer);
        FPVector2.Serialize(&p->SkillScreenPos, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct MovePreorder {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FPVector2 vector;
    [FieldOffset(4)]
    public Int32 totalFrame;
    [FieldOffset(0)]
    public Int32 remainFrame;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7027;
        hash = hash * 31 + vector.GetHashCode();
        hash = hash * 31 + totalFrame.GetHashCode();
        hash = hash * 31 + remainFrame.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (MovePreorder*)ptr;
        serializer.Stream.Serialize(&p->remainFrame);
        serializer.Stream.Serialize(&p->totalFrame);
        FPVector2.Serialize(&p->vector, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerData {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public PlayerRef PlayerRef;
    [FieldOffset(32)]
    public FP RespawnTimer;
    [FieldOffset(4)]
    public Int32 Kills;
    [FieldOffset(0)]
    public Int32 Deaths;
    [FieldOffset(8)]
    public Int32 LastKillFrame;
    [FieldOffset(12)]
    public Int32 StatisticPosition;
    [FieldOffset(20)]
    public QBoolean IsAlive;
    [FieldOffset(24)]
    public QBoolean IsConnected;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10271;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + RespawnTimer.GetHashCode();
        hash = hash * 31 + Kills.GetHashCode();
        hash = hash * 31 + Deaths.GetHashCode();
        hash = hash * 31 + LastKillFrame.GetHashCode();
        hash = hash * 31 + StatisticPosition.GetHashCode();
        hash = hash * 31 + IsAlive.GetHashCode();
        hash = hash * 31 + IsConnected.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerData*)ptr;
        serializer.Stream.Serialize(&p->Deaths);
        serializer.Stream.Serialize(&p->Kills);
        serializer.Stream.Serialize(&p->LastKillFrame);
        serializer.Stream.Serialize(&p->StatisticPosition);
        PlayerRef.Serialize(&p->PlayerRef, serializer);
        QBoolean.Serialize(&p->IsAlive, serializer);
        QBoolean.Serialize(&p->IsConnected, serializer);
        FP.Serialize(&p->RespawnTimer, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SkillModel {
    public const Int32 SIZE = 36;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(8)]
    public Int32 id;
    [FieldOffset(0)]
    public Int32 cd;
    [FieldOffset(24)]
    public QBoolean isAttack;
    [FieldOffset(20)]
    public QBoolean canInterrupt;
    [FieldOffset(4)]
    public Int32 condition;
    [FieldOffset(12)]
    public Int32 indicatorType;
    [FieldOffset(16)]
    public Int32 timelineModelId;
    [FieldOffset(32)]
    public QListPtr<AttributeCost> attrCosts;
    [FieldOffset(28)]
    public QListPtr<AddBuffInfo> addBuffs;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6329;
        hash = hash * 31 + id.GetHashCode();
        hash = hash * 31 + cd.GetHashCode();
        hash = hash * 31 + isAttack.GetHashCode();
        hash = hash * 31 + canInterrupt.GetHashCode();
        hash = hash * 31 + condition.GetHashCode();
        hash = hash * 31 + indicatorType.GetHashCode();
        hash = hash * 31 + timelineModelId.GetHashCode();
        hash = hash * 31 + attrCosts.GetHashCode();
        hash = hash * 31 + addBuffs.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      attrCosts = default;
      addBuffs = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SkillModel*)ptr;
        serializer.Stream.Serialize(&p->cd);
        serializer.Stream.Serialize(&p->condition);
        serializer.Stream.Serialize(&p->id);
        serializer.Stream.Serialize(&p->indicatorType);
        serializer.Stream.Serialize(&p->timelineModelId);
        QBoolean.Serialize(&p->canInterrupt, serializer);
        QBoolean.Serialize(&p->isAttack, serializer);
        QList.Serialize(&p->addBuffs, serializer, Statics.SerializeAddBuffInfo);
        QList.Serialize(&p->attrCosts, serializer, Statics.SerializeAttributeCost);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SkillObj {
    public const Int32 SIZE = 44;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    public Int32 level;
    [FieldOffset(0)]
    public Int32 cd;
    [FieldOffset(8)]
    public SkillModel model;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17321;
        hash = hash * 31 + level.GetHashCode();
        hash = hash * 31 + cd.GetHashCode();
        hash = hash * 31 + model.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      model.ClearPointers(f, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SkillObj*)ptr;
        serializer.Stream.Serialize(&p->cd);
        serializer.Stream.Serialize(&p->level);
        Quantum.SkillModel.Serialize(&p->model, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TLNode_AddBuffToCaster {
    public const Int32 SIZE = 80;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AddBuffInfo addBuffInfo;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6449;
        hash = hash * 31 + addBuffInfo.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      addBuffInfo.ClearPointers(f, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TLNode_AddBuffToCaster*)ptr;
        Quantum.AddBuffInfo.Serialize(&p->addBuffInfo, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TLNode_Log {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QString64 content;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 11941;
        hash = hash * 31 + content.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TLNode_Log*)ptr;
        Quantum.QString64.Serialize(&p->content, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TLNode_PlayAnim {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 animKey;
    [FieldOffset(4)]
    public QBoolean force;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2411;
        hash = hash * 31 + animKey.GetHashCode();
        hash = hash * 31 + force.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TLNode_PlayAnim*)ptr;
        serializer.Stream.Serialize(&p->animKey);
        QBoolean.Serialize(&p->force, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TimelineModel {
    public const Int32 SIZE = 12;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 id;
    [FieldOffset(4)]
    public Int32 totalFrame;
    [FieldOffset(8)]
    public QListPtr<TimelineNode> nodes;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21061;
        hash = hash * 31 + id.GetHashCode();
        hash = hash * 31 + totalFrame.GetHashCode();
        hash = hash * 31 + nodes.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      nodes = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TimelineModel*)ptr;
        serializer.Stream.Serialize(&p->id);
        serializer.Stream.Serialize(&p->totalFrame);
        QList.Serialize(&p->nodes, serializer, Statics.SerializeTimelineNode);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TimelineNode {
    public const Int32 SIZE = 104;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public Int32 frame;
    [FieldOffset(4)]
    public ETLNodeType nodeType;
    [FieldOffset(16)]
    public TLNode node;
    [FieldOffset(0)]
    public DataContainer args;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2089;
        hash = hash * 31 + frame.GetHashCode();
        hash = hash * 31 + (Int32)nodeType;
        hash = hash * 31 + node.GetHashCode();
        hash = hash * 31 + args.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      node.ClearPointers(f, entity);
      args.ClearPointers(f, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TimelineNode*)ptr;
        Quantum.DataContainer.Serialize(&p->args, serializer);
        serializer.Stream.Serialize((Int32*)&p->nodeType);
        serializer.Stream.Serialize(&p->frame);
        Quantum.TLNode.Serialize(&p->node, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TimelineObj {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(28)]
    private fixed Byte _alignment_padding_[4];
    [FieldOffset(0)]
    public Int32 elapsedFrame;
    [FieldOffset(8)]
    public EntityRef caster;
    [FieldOffset(16)]
    public TimelineModel model;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16963;
        hash = hash * 31 + elapsedFrame.GetHashCode();
        hash = hash * 31 + caster.GetHashCode();
        hash = hash * 31 + model.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      model.ClearPointers(f, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TimelineObj*)ptr;
        serializer.Stream.Serialize(&p->elapsedFrame);
        EntityRef.Serialize(&p->caster, serializer);
        Quantum.TimelineModel.Serialize(&p->model, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 1024;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef<Map> Map;
    [FieldOffset(8)]
    public FP DeltaTime;
    [FieldOffset(16)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(32)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(48)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(64)]
    public RNGSession RngSession;
    [FieldOffset(80)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(120)]
    public BitSet1024 Systems;
    [FieldOffset(248)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(544)]
    public Int32 PlayerConnectedCount;
    [FieldOffset(552)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[432];
    [FieldOffset(984)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(992)]
    public EGameState State;
    [FieldOffset(1016)]
    public FP MatchTimer;
    [FieldOffset(1008)]
    public FP MatchDuration;
    [FieldOffset(1000)]
    public FP GameDuration;
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 72, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12473;
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerConnectedCount.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + (Int32)State;
        hash = hash * 31 + MatchTimer.GetHashCode();
        hash = hash * 31 + MatchDuration.GetHashCode();
        hash = hash * 31 + GameDuration.GetHashCode();
        return hash;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRef.Serialize(&p->Map, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
        serializer.Stream.Serialize(&p->PlayerConnectedCount);
        FixedArray.Serialize(p->input, serializer, Statics.SerializeInput);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        serializer.Stream.Serialize((Int32*)&p->State);
        FP.Serialize(&p->GameDuration, serializer);
        FP.Serialize(&p->MatchDuration, serializer);
        FP.Serialize(&p->MatchTimer, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct BM_Instance {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private Int32 _field_used_;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BM_Instance.AUTORELOAD)]
    private BM_AutoReload _AutoReload;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BM_Instance.DASH)]
    private BM_Dash _Dash;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BM_Instance.DISABLEMOVE)]
    private BM_DisableMove _DisableMove;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BM_Instance.DISABLEMOVE_NOEFFECT)]
    private BM_DisableMove_NoEffect _DisableMove_NoEffect;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BM_Instance.DISABLESKILL)]
    private BM_DisableSkill _DisableSkill;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BM_Instance.HOT)]
    private BM_Hot _Hot;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BM_Instance.POISON)]
    private BM_Poison _Poison;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BM_Instance.PUREATTRIB)]
    private BM_PureAttrib _PureAttrib;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BM_Instance.TEST1)]
    private BM_Test1 _Test1;
    public const Int32 AUTORELOAD = 1;
    public const Int32 DASH = 2;
    public const Int32 DISABLEMOVE = 3;
    public const Int32 DISABLEMOVE_NOEFFECT = 4;
    public const Int32 DISABLESKILL = 5;
    public const Int32 HOT = 6;
    public const Int32 POISON = 7;
    public const Int32 PUREATTRIB = 8;
    public const Int32 TEST1 = 9;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public BM_AutoReload* AutoReload {
      get {
        fixed (BM_AutoReload* p = &_AutoReload) {
          if (_field_used_ != AUTORELOAD) {
            Native.Utils.Clear(p, 4);
            _field_used_ = AUTORELOAD;
          }
          return p;
        }
      }
    }
    public BM_Dash* Dash {
      get {
        fixed (BM_Dash* p = &_Dash) {
          if (_field_used_ != DASH) {
            Native.Utils.Clear(p, 8);
            _field_used_ = DASH;
          }
          return p;
        }
      }
    }
    public BM_DisableMove* DisableMove {
      get {
        fixed (BM_DisableMove* p = &_DisableMove) {
          if (_field_used_ != DISABLEMOVE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = DISABLEMOVE;
          }
          return p;
        }
      }
    }
    public BM_DisableMove_NoEffect* DisableMove_NoEffect {
      get {
        fixed (BM_DisableMove_NoEffect* p = &_DisableMove_NoEffect) {
          if (_field_used_ != DISABLEMOVE_NOEFFECT) {
            Native.Utils.Clear(p, 4);
            _field_used_ = DISABLEMOVE_NOEFFECT;
          }
          return p;
        }
      }
    }
    public BM_DisableSkill* DisableSkill {
      get {
        fixed (BM_DisableSkill* p = &_DisableSkill) {
          if (_field_used_ != DISABLESKILL) {
            Native.Utils.Clear(p, 4);
            _field_used_ = DISABLESKILL;
          }
          return p;
        }
      }
    }
    public BM_Hot* Hot {
      get {
        fixed (BM_Hot* p = &_Hot) {
          if (_field_used_ != HOT) {
            Native.Utils.Clear(p, 6);
            _field_used_ = HOT;
          }
          return p;
        }
      }
    }
    public BM_Poison* Poison {
      get {
        fixed (BM_Poison* p = &_Poison) {
          if (_field_used_ != POISON) {
            Native.Utils.Clear(p, 4);
            _field_used_ = POISON;
          }
          return p;
        }
      }
    }
    public BM_PureAttrib* PureAttrib {
      get {
        fixed (BM_PureAttrib* p = &_PureAttrib) {
          if (_field_used_ != PUREATTRIB) {
            Native.Utils.Clear(p, 4);
            _field_used_ = PUREATTRIB;
          }
          return p;
        }
      }
    }
    public BM_Test1* Test1 {
      get {
        fixed (BM_Test1* p = &_Test1) {
          if (_field_used_ != TEST1) {
            Native.Utils.Clear(p, 4);
            _field_used_ = TEST1;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20903;
        hash = hash * 31 + _field_used_.GetHashCode();
        hash = hash * 31 + _AutoReload.GetHashCode();
        hash = hash * 31 + _Dash.GetHashCode();
        hash = hash * 31 + _DisableMove.GetHashCode();
        hash = hash * 31 + _DisableMove_NoEffect.GetHashCode();
        hash = hash * 31 + _DisableSkill.GetHashCode();
        hash = hash * 31 + _Hot.GetHashCode();
        hash = hash * 31 + _Poison.GetHashCode();
        hash = hash * 31 + _PureAttrib.GetHashCode();
        hash = hash * 31 + _Test1.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BM_Instance*)ptr;
        if (serializer.InputMode) {
          serializer.Stream.SerializeBuffer((byte*)p, Quantum.BM_Instance.SIZE);
          return;
        }
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == AUTORELOAD) {
          Quantum.BM_AutoReload.Serialize(&p->_AutoReload, serializer);
        }
        if (p->_field_used_ == DASH) {
          Quantum.BM_Dash.Serialize(&p->_Dash, serializer);
        }
        if (p->_field_used_ == DISABLEMOVE) {
          Quantum.BM_DisableMove.Serialize(&p->_DisableMove, serializer);
        }
        if (p->_field_used_ == DISABLEMOVE_NOEFFECT) {
          Quantum.BM_DisableMove_NoEffect.Serialize(&p->_DisableMove_NoEffect, serializer);
        }
        if (p->_field_used_ == DISABLESKILL) {
          Quantum.BM_DisableSkill.Serialize(&p->_DisableSkill, serializer);
        }
        if (p->_field_used_ == HOT) {
          Quantum.BM_Hot.Serialize(&p->_Hot, serializer);
        }
        if (p->_field_used_ == POISON) {
          Quantum.BM_Poison.Serialize(&p->_Poison, serializer);
        }
        if (p->_field_used_ == PUREATTRIB) {
          Quantum.BM_PureAttrib.Serialize(&p->_PureAttrib, serializer);
        }
        if (p->_field_used_ == TEST1) {
          Quantum.BM_Test1.Serialize(&p->_Test1, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct TLNode {
    public const Int32 SIZE = 88;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private Int32 _field_used_;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.TLNode.LOG)]
    private TLNode_Log _Log;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.TLNode.ADDBUFFTOCASTER)]
    private TLNode_AddBuffToCaster _AddBuffToCaster;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.TLNode.PLAYANIM)]
    private TLNode_PlayAnim _PlayAnim;
    public const Int32 LOG = 1;
    public const Int32 ADDBUFFTOCASTER = 2;
    public const Int32 PLAYANIM = 3;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public TLNode_Log* Log {
      get {
        fixed (TLNode_Log* p = &_Log) {
          if (_field_used_ != LOG) {
            Native.Utils.Clear(p, 64);
            _field_used_ = LOG;
          }
          return p;
        }
      }
    }
    public TLNode_AddBuffToCaster* AddBuffToCaster {
      get {
        fixed (TLNode_AddBuffToCaster* p = &_AddBuffToCaster) {
          if (_field_used_ != ADDBUFFTOCASTER) {
            Native.Utils.Clear(p, 80);
            _field_used_ = ADDBUFFTOCASTER;
          }
          return p;
        }
      }
    }
    public TLNode_PlayAnim* PlayAnim {
      get {
        fixed (TLNode_PlayAnim* p = &_PlayAnim) {
          if (_field_used_ != PLAYANIM) {
            Native.Utils.Clear(p, 8);
            _field_used_ = PLAYANIM;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 11701;
        hash = hash * 31 + _field_used_.GetHashCode();
        hash = hash * 31 + _Log.GetHashCode();
        hash = hash * 31 + _AddBuffToCaster.GetHashCode();
        hash = hash * 31 + _PlayAnim.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      if (_field_used_ == ADDBUFFTOCASTER) {
        _AddBuffToCaster.ClearPointers(f, entity);
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TLNode*)ptr;
        if (serializer.InputMode) {
          serializer.Stream.SerializeBuffer((byte*)p, Quantum.TLNode.SIZE);
          return;
        }
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == ADDBUFFTOCASTER) {
          Quantum.TLNode_AddBuffToCaster.Serialize(&p->_AddBuffToCaster, serializer);
        }
        if (p->_field_used_ == LOG) {
          Quantum.TLNode_Log.Serialize(&p->_Log, serializer);
        }
        if (p->_field_used_ == PLAYANIM) {
          Quantum.TLNode_PlayAnim.Serialize(&p->_PlayAnim, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct Variable {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private Int32 _field_used_;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.Variable.I)]
    private Int32 _i;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.Variable.F)]
    private FP _f;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.Variable.STR)]
    private QString64 _str;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.Variable.VEC2)]
    private FPVector2 _vec2;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.Variable.VEC3)]
    private FPVector3 _vec3;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.Variable.QUAT)]
    private FPQuaternion _quat;
    public const Int32 I = 1;
    public const Int32 F = 2;
    public const Int32 STR = 3;
    public const Int32 VEC2 = 4;
    public const Int32 VEC3 = 5;
    public const Int32 QUAT = 6;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public Int32* i {
      get {
        fixed (Int32* p = &_i) {
          if (_field_used_ != I) {
            Native.Utils.Clear(p, 4);
            _field_used_ = I;
          }
          return p;
        }
      }
    }
    public FP* f {
      get {
        fixed (FP* p = &_f) {
          if (_field_used_ != F) {
            Native.Utils.Clear(p, 8);
            _field_used_ = F;
          }
          return p;
        }
      }
    }
    public QString64* str {
      get {
        fixed (QString64* p = &_str) {
          if (_field_used_ != STR) {
            Native.Utils.Clear(p, 64);
            _field_used_ = STR;
          }
          return p;
        }
      }
    }
    public FPVector2* vec2 {
      get {
        fixed (FPVector2* p = &_vec2) {
          if (_field_used_ != VEC2) {
            Native.Utils.Clear(p, 16);
            _field_used_ = VEC2;
          }
          return p;
        }
      }
    }
    public FPVector3* vec3 {
      get {
        fixed (FPVector3* p = &_vec3) {
          if (_field_used_ != VEC3) {
            Native.Utils.Clear(p, 24);
            _field_used_ = VEC3;
          }
          return p;
        }
      }
    }
    public FPQuaternion* quat {
      get {
        fixed (FPQuaternion* p = &_quat) {
          if (_field_used_ != QUAT) {
            Native.Utils.Clear(p, 32);
            _field_used_ = QUAT;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7247;
        hash = hash * 31 + _field_used_.GetHashCode();
        hash = hash * 31 + _i.GetHashCode();
        hash = hash * 31 + _f.GetHashCode();
        hash = hash * 31 + _str.GetHashCode();
        hash = hash * 31 + _vec2.GetHashCode();
        hash = hash * 31 + _vec3.GetHashCode();
        hash = hash * 31 + _quat.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Variable*)ptr;
        if (serializer.InputMode) {
          serializer.Stream.SerializeBuffer((byte*)p, Quantum.Variable.SIZE);
          return;
        }
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == F) {
          FP.Serialize(&p->_f, serializer);
        }
        if (p->_field_used_ == I) {
          serializer.Stream.Serialize(&p->_i);
        }
        if (p->_field_used_ == QUAT) {
          FPQuaternion.Serialize(&p->_quat, serializer);
        }
        if (p->_field_used_ == STR) {
          Quantum.QString64.Serialize(&p->_str, serializer);
        }
        if (p->_field_used_ == VEC2) {
          FPVector2.Serialize(&p->_vec2, serializer);
        }
        if (p->_field_used_ == VEC3) {
          FPVector3.Serialize(&p->_vec3, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AttribComp : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    [AllocateOnComponentAdded()]
    [FreeOnComponentRemoved()]
    [HideInInspector()]
    public QDictionaryPtr<Int32, Int32> ValueAttribs;
    [FieldOffset(0)]
    [AllocateOnComponentAdded()]
    [FreeOnComponentRemoved()]
    [HideInInspector()]
    public QDictionaryPtr<Int32, FP> PercentAttribs;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16477;
        hash = hash * 31 + ValueAttribs.GetHashCode();
        hash = hash * 31 + PercentAttribs.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      if (ValueAttribs != default) f.FreeDictionary(ref ValueAttribs);
      if (PercentAttribs != default) f.FreeDictionary(ref PercentAttribs);
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.AttribComp*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public void AllocatePointers(FrameBase f, EntityRef entity) {
      f.TryAllocateDictionary(ref ValueAttribs);
      f.TryAllocateDictionary(ref PercentAttribs);
    }
    public static void OnAdded(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.AttribComp*)ptr;
      p->AllocatePointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AttribComp*)ptr;
        QDictionary.Serialize(&p->PercentAttribs, serializer, Statics.SerializeInt32, Statics.SerializeFP);
        QDictionary.Serialize(&p->ValueAttribs, serializer, Statics.SerializeInt32, Statics.SerializeInt32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BuffComp : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    [AllocateOnComponentAdded()]
    [FreeOnComponentRemoved()]
    [HideInInspector()]
    public QListPtr<BuffObj> Buffs;
    [FieldOffset(0)]
    [AllocateOnComponentAdded()]
    [FreeOnComponentRemoved()]
    [HideInInspector()]
    public QListPtr<AddBuffInfo> AddBuffs;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20047;
        hash = hash * 31 + Buffs.GetHashCode();
        hash = hash * 31 + AddBuffs.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      if (Buffs != default) f.FreeList(ref Buffs);
      if (AddBuffs != default) f.FreeList(ref AddBuffs);
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.BuffComp*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public void AllocatePointers(FrameBase f, EntityRef entity) {
      f.TryAllocateList(ref Buffs);
      f.TryAllocateList(ref AddBuffs);
    }
    public static void OnAdded(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.BuffComp*)ptr;
      p->AllocatePointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BuffComp*)ptr;
        QList.Serialize(&p->AddBuffs, serializer, Statics.SerializeAddBuffInfo);
        QList.Serialize(&p->Buffs, serializer, Statics.SerializeBuffObj);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ForceMoveComp : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [AllocateOnComponentAdded()]
    [FreeOnComponentRemoved()]
    [HideInInspector()]
    public QListPtr<MovePreorder> MovePreorder;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8161;
        hash = hash * 31 + MovePreorder.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      if (MovePreorder != default) f.FreeList(ref MovePreorder);
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.ForceMoveComp*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public void AllocatePointers(FrameBase f, EntityRef entity) {
      f.TryAllocateList(ref MovePreorder);
    }
    public static void OnAdded(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.ForceMoveComp*)ptr;
      p->AllocatePointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ForceMoveComp*)ptr;
        QList.Serialize(&p->MovePreorder, serializer, Statics.SerializeMovePreorder);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Gameplay : Quantum.IComponentSingleton {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [AllocateOnComponentAdded()]
    [FreeOnComponentRemoved()]
    public QDictionaryPtr<PlayerRef, PlayerData> PlayerData;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15083;
        hash = hash * 31 + PlayerData.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      if (PlayerData != default) f.FreeDictionary(ref PlayerData);
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.Gameplay*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public void AllocatePointers(FrameBase f, EntityRef entity) {
      f.TryAllocateDictionary(ref PlayerData);
    }
    public static void OnAdded(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.Gameplay*)ptr;
      p->AllocatePointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Gameplay*)ptr;
        QDictionary.Serialize(&p->PlayerData, serializer, Statics.SerializePlayerRef, Statics.SerializePlayerData);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct InputComp : Quantum.IComponent {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [HideInInspector()]
    public Input Input;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9419;
        hash = hash * 31 + Input.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (InputComp*)ptr;
        Quantum.Input.Serialize(&p->Input, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct MoveComp : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [HideInInspector()]
    public FPVector2 Vector;
    [FieldOffset(0)]
    [HideInInspector()]
    public FP RotationDegree;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17467;
        hash = hash * 31 + Vector.GetHashCode();
        hash = hash * 31 + RotationDegree.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (MoveComp*)ptr;
        FP.Serialize(&p->RotationDegree, serializer);
        FPVector2.Serialize(&p->Vector, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerComp : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [HideInInspector()]
    public PlayerRef PlayerRef;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12671;
        hash = hash * 31 + PlayerRef.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerComp*)ptr;
        PlayerRef.Serialize(&p->PlayerRef, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SBuffModelContainerComp : Quantum.IComponentSingleton {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public QDictionaryPtr<Int32, BuffModel> Models;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4259;
        hash = hash * 31 + Models.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Models = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.SBuffModelContainerComp*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SBuffModelContainerComp*)ptr;
        QDictionary.Serialize(&p->Models, serializer, Statics.SerializeInt32, Statics.SerializeBuffModel);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SSkillModelContainerComp : Quantum.IComponentSingleton {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public QDictionaryPtr<Int32, SkillModel> Models;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10037;
        hash = hash * 31 + Models.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Models = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.SSkillModelContainerComp*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SSkillModelContainerComp*)ptr;
        QDictionary.Serialize(&p->Models, serializer, Statics.SerializeInt32, Statics.SerializeSkillModel);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct STimelineComp : Quantum.IComponentSingleton {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [AllocateOnComponentAdded()]
    [FreeOnComponentRemoved()]
    [ExcludeFromPrototype()]
    public QListPtr<TimelineObj> Timelines;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6869;
        hash = hash * 31 + Timelines.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      if (Timelines != default) f.FreeList(ref Timelines);
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.STimelineComp*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public void AllocatePointers(FrameBase f, EntityRef entity) {
      f.TryAllocateList(ref Timelines);
    }
    public static void OnAdded(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.STimelineComp*)ptr;
      p->AllocatePointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (STimelineComp*)ptr;
        QList.Serialize(&p->Timelines, serializer, Statics.SerializeTimelineObj);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct STimelineModelContainerComp : Quantum.IComponentSingleton {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public QDictionaryPtr<Int32, TimelineModel> Models;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5741;
        hash = hash * 31 + Models.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Models = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.STimelineModelContainerComp*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (STimelineModelContainerComp*)ptr;
        QDictionary.Serialize(&p->Models, serializer, Statics.SerializeInt32, Statics.SerializeTimelineModel);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SkillComp : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [AllocateOnComponentAdded()]
    [FreeOnComponentRemoved()]
    [HideInInspector()]
    public QListPtr<SkillObj> Skills;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9547;
        hash = hash * 31 + Skills.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      if (Skills != default) f.FreeList(ref Skills);
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.SkillComp*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public void AllocatePointers(FrameBase f, EntityRef entity) {
      f.TryAllocateList(ref Skills);
    }
    public static void OnAdded(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.SkillComp*)ptr;
      p->AllocatePointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SkillComp*)ptr;
        QList.Serialize(&p->Skills, serializer, Statics.SerializeSkillObj);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct StatsComp : Quantum.IComponent {
    public const Int32 SIZE = 28;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(16)]
    [HideInInspector()]
    public Int32 Hp;
    [FieldOffset(20)]
    [HideInInspector()]
    public Int32 Mp;
    [FieldOffset(12)]
    [HideInInspector()]
    public Int32 Defence;
    [FieldOffset(0)]
    [HideInInspector()]
    public Int32 AttackClip;
    [FieldOffset(24)]
    [HideInInspector()]
    public Int32 SuperPower;
    [FieldOffset(8)]
    [HideInInspector()]
    public Int32 CanUseSkill;
    [FieldOffset(4)]
    [HideInInspector()]
    public Int32 CanMove;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8219;
        hash = hash * 31 + Hp.GetHashCode();
        hash = hash * 31 + Mp.GetHashCode();
        hash = hash * 31 + Defence.GetHashCode();
        hash = hash * 31 + AttackClip.GetHashCode();
        hash = hash * 31 + SuperPower.GetHashCode();
        hash = hash * 31 + CanUseSkill.GetHashCode();
        hash = hash * 31 + CanMove.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StatsComp*)ptr;
        serializer.Stream.Serialize(&p->AttackClip);
        serializer.Stream.Serialize(&p->CanMove);
        serializer.Stream.Serialize(&p->CanUseSkill);
        serializer.Stream.Serialize(&p->Defence);
        serializer.Stream.Serialize(&p->Hp);
        serializer.Stream.Serialize(&p->Mp);
        serializer.Stream.Serialize(&p->SuperPower);
    }
  }
  public unsafe partial interface ISignalOnPlayerSpawned : ISignal {
    void OnPlayerSpawned(Frame f, EntityRef entityRef);
  }
  public static unsafe partial class Constants {
  }
  public unsafe partial class Frame {
    private ISignalOnPlayerSpawned[] _ISignalOnPlayerSpawnedSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities, 256);
      _ISignalOnPlayerSpawnedSystems = BuildSignalsArray<ISignalOnPlayerSpawned>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<AIBlackboardComponent>();
      BuildSignalsArrayOnComponentRemoved<AIBlackboardComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.AttribComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AttribComp>();
      BuildSignalsArrayOnComponentAdded<BTAgent>();
      BuildSignalsArrayOnComponentRemoved<BTAgent>();
      BuildSignalsArrayOnComponentAdded<BotSDKGlobals>();
      BuildSignalsArrayOnComponentRemoved<BotSDKGlobals>();
      BuildSignalsArrayOnComponentAdded<Quantum.BuffComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BuffComp>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.ForceMoveComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ForceMoveComp>();
      BuildSignalsArrayOnComponentAdded<Quantum.Gameplay>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Gameplay>();
      BuildSignalsArrayOnComponentAdded<HFSMAgent>();
      BuildSignalsArrayOnComponentRemoved<HFSMAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.InputComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.InputComp>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.MoveComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.MoveComp>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerComp>();
      BuildSignalsArrayOnComponentAdded<Quantum.SBuffModelContainerComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SBuffModelContainerComp>();
      BuildSignalsArrayOnComponentAdded<Quantum.SSkillModelContainerComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SSkillModelContainerComp>();
      BuildSignalsArrayOnComponentAdded<Quantum.STimelineComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.STimelineComp>();
      BuildSignalsArrayOnComponentAdded<Quantum.STimelineModelContainerComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.STimelineModelContainerComp>();
      BuildSignalsArrayOnComponentAdded<Quantum.SkillComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SkillComp>();
      BuildSignalsArrayOnComponentAdded<Quantum.StatsComp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.StatsComp>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<UTAgent>();
      BuildSignalsArrayOnComponentRemoved<UTAgent>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
    }
    partial void SetPlayerInputCodeGen(PlayerRef player, Input input) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->MoveDirection = input.MoveDirection;
      i->Attack = i->Attack.Update(this.Number, input.Attack);
      i->AttackScreenPos = input.AttackScreenPos;
      i->Skill = i->Skill.Update(this.Number, input.Skill);
      i->SkillScreenPos = input.SkillScreenPos;
    }
    public Input* GetPlayerInput(PlayerRef player) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    partial void GetPlayerLastConnectionStateCodeGen(ref BitSetRef bitSet) {
      bitSet = new(_globals->PlayerLastConnectionState.Bits, _globals->PlayerLastConnectionState.Length);
    }
    partial void ResetPhysicsCodeGen() {
      if (Context.Physics2D != null && Physics2D.Map != null && Physics2D.Map.Guid.IsDynamic) Physics2D.ResetMap();
      Physics2D.Init(_globals->PhysicsState2D.MapStaticCollidersState.TrackedMap);
      if (Context.Physics3D != null && Physics3D.Map != null && Physics3D.Map.Guid.IsDynamic) Physics3D.ResetMap();
      Physics3D.Init(_globals->PhysicsState3D.MapStaticCollidersState.TrackedMap);
    }
    public unsafe partial struct FrameSignals {
      public void OnPlayerSpawned(EntityRef entityRef) {
        var array = _f._ISignalOnPlayerSpawnedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPlayerSpawned(_f, entityRef);
          }
        }
      }
    }
  }
  public unsafe partial class Statics {
    public static FrameSerializer.Delegate SerializeInt32;
    public static FrameSerializer.Delegate SerializeFP;
    public static FrameSerializer.Delegate SerializeAddBuffInfo;
    public static FrameSerializer.Delegate SerializeBuffObj;
    public static FrameSerializer.Delegate SerializeVariable;
    public static FrameSerializer.Delegate SerializeMovePreorder;
    public static FrameSerializer.Delegate SerializePlayerRef;
    public static FrameSerializer.Delegate SerializePlayerData;
    public static FrameSerializer.Delegate SerializeBuffModel;
    public static FrameSerializer.Delegate SerializeSkillModel;
    public static FrameSerializer.Delegate SerializeTimelineObj;
    public static FrameSerializer.Delegate SerializeTimelineModel;
    public static FrameSerializer.Delegate SerializeSkillObj;
    public static FrameSerializer.Delegate SerializeAttributeCost;
    public static FrameSerializer.Delegate SerializeTimelineNode;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitStaticDelegatesGen() {
      SerializeInt32 = (v, s) => {{ s.Stream.Serialize((Int32*)v); }};
      SerializeFP = FP.Serialize;
      SerializeAddBuffInfo = Quantum.AddBuffInfo.Serialize;
      SerializeBuffObj = Quantum.BuffObj.Serialize;
      SerializeVariable = Quantum.Variable.Serialize;
      SerializeMovePreorder = Quantum.MovePreorder.Serialize;
      SerializePlayerRef = PlayerRef.Serialize;
      SerializePlayerData = Quantum.PlayerData.Serialize;
      SerializeBuffModel = Quantum.BuffModel.Serialize;
      SerializeSkillModel = Quantum.SkillModel.Serialize;
      SerializeTimelineObj = Quantum.TimelineObj.Serialize;
      SerializeTimelineModel = Quantum.TimelineModel.Serialize;
      SerializeSkillObj = Quantum.SkillObj.Serialize;
      SerializeAttributeCost = Quantum.AttributeCost.Serialize;
      SerializeTimelineNode = Quantum.TimelineNode.Serialize;
      SerializeInput = Quantum.Input.Serialize;
    }
    static partial void RegisterSimulationTypesGen(TypeRegistry typeRegistry) {
      typeRegistry.Register(typeof(AIBlackboardComponent), AIBlackboardComponent.SIZE);
      typeRegistry.Register(typeof(Quantum.AddBuffInfo), Quantum.AddBuffInfo.SIZE);
      typeRegistry.Register(typeof(AssetGuid), AssetGuid.SIZE);
      typeRegistry.Register(typeof(AssetRef), AssetRef.SIZE);
      typeRegistry.Register(typeof(Quantum.AttribComp), Quantum.AttribComp.SIZE);
      typeRegistry.Register(typeof(Quantum.AttributeCost), Quantum.AttributeCost.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_AutoReload), Quantum.BM_AutoReload.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_Dash), Quantum.BM_Dash.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_DisableMove), Quantum.BM_DisableMove.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_DisableMove_NoEffect), Quantum.BM_DisableMove_NoEffect.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_DisableSkill), Quantum.BM_DisableSkill.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_Hot), Quantum.BM_Hot.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_Instance), Quantum.BM_Instance.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_Poison), Quantum.BM_Poison.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_PureAttrib), Quantum.BM_PureAttrib.SIZE);
      typeRegistry.Register(typeof(Quantum.BM_Test1), Quantum.BM_Test1.SIZE);
      typeRegistry.Register(typeof(BTAgent), BTAgent.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      typeRegistry.Register(typeof(BotSDKGlobals), BotSDKGlobals.SIZE);
      typeRegistry.Register(typeof(Quantum.BuffComp), Quantum.BuffComp.SIZE);
      typeRegistry.Register(typeof(Quantum.BuffModel), Quantum.BuffModel.SIZE);
      typeRegistry.Register(typeof(Quantum.BuffObj), Quantum.BuffObj.SIZE);
      typeRegistry.Register(typeof(Button), Button.SIZE);
      typeRegistry.Register(typeof(CallbackFlags), 4);
      typeRegistry.Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      typeRegistry.Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      typeRegistry.Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      typeRegistry.Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      typeRegistry.Register(typeof(ComponentTypeRef), ComponentTypeRef.SIZE);
      typeRegistry.Register(typeof(Quantum.DataContainer), Quantum.DataContainer.SIZE);
      typeRegistry.Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      typeRegistry.Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.EGameState), 4);
      typeRegistry.Register(typeof(Quantum.EStateType), 4);
      typeRegistry.Register(typeof(Quantum.ETLNodeType), 4);
      typeRegistry.Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      typeRegistry.Register(typeof(EntityRef), EntityRef.SIZE);
      typeRegistry.Register(typeof(FP), FP.SIZE);
      typeRegistry.Register(typeof(FPBounds2), FPBounds2.SIZE);
      typeRegistry.Register(typeof(FPBounds3), FPBounds3.SIZE);
      typeRegistry.Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      typeRegistry.Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      typeRegistry.Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      typeRegistry.Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      typeRegistry.Register(typeof(FPVector2), FPVector2.SIZE);
      typeRegistry.Register(typeof(FPVector3), FPVector3.SIZE);
      typeRegistry.Register(typeof(Quantum.ForceMoveComp), Quantum.ForceMoveComp.SIZE);
      typeRegistry.Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      typeRegistry.Register(typeof(FrameTimer), FrameTimer.SIZE);
      typeRegistry.Register(typeof(Quantum.Gameplay), Quantum.Gameplay.SIZE);
      typeRegistry.Register(typeof(HFSMAgent), HFSMAgent.SIZE);
      typeRegistry.Register(typeof(HFSMData), HFSMData.SIZE);
      typeRegistry.Register(typeof(HingeJoint), HingeJoint.SIZE);
      typeRegistry.Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      typeRegistry.Register(typeof(Hit), Hit.SIZE);
      typeRegistry.Register(typeof(Hit3D), Hit3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      typeRegistry.Register(typeof(Quantum.InputButtons), 4);
      typeRegistry.Register(typeof(Quantum.InputComp), Quantum.InputComp.SIZE);
      typeRegistry.Register(typeof(Joint), Joint.SIZE);
      typeRegistry.Register(typeof(Joint3D), Joint3D.SIZE);
      typeRegistry.Register(typeof(LayerMask), LayerMask.SIZE);
      typeRegistry.Register(typeof(MapEntityId), MapEntityId.SIZE);
      typeRegistry.Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      typeRegistry.Register(typeof(Quantum.MoveComp), Quantum.MoveComp.SIZE);
      typeRegistry.Register(typeof(Quantum.MovePreorder), Quantum.MovePreorder.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      typeRegistry.Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      typeRegistry.Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      typeRegistry.Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      typeRegistry.Register(typeof(NullableFP), NullableFP.SIZE);
      typeRegistry.Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      typeRegistry.Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      typeRegistry.Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      typeRegistry.Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      typeRegistry.Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks2D), PhysicsCallbacks2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks3D), PhysicsCallbacks3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      typeRegistry.Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints2D), PhysicsJoints2D.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints3D), PhysicsJoints3D.SIZE);
      typeRegistry.Register(typeof(PhysicsQueryRef), PhysicsQueryRef.SIZE);
      typeRegistry.Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerComp), Quantum.PlayerComp.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerData), Quantum.PlayerData.SIZE);
      typeRegistry.Register(typeof(PlayerRef), PlayerRef.SIZE);
      typeRegistry.Register(typeof(Ptr), Ptr.SIZE);
      typeRegistry.Register(typeof(QBoolean), QBoolean.SIZE);
      typeRegistry.Register(typeof(Quantum.QString64), Quantum.QString64.SIZE);
      typeRegistry.Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      typeRegistry.Register(typeof(QueryOptions), 2);
      typeRegistry.Register(typeof(RNGSession), RNGSession.SIZE);
      typeRegistry.Register(typeof(Quantum.SBuffModelContainerComp), Quantum.SBuffModelContainerComp.SIZE);
      typeRegistry.Register(typeof(Quantum.SSkillModelContainerComp), Quantum.SSkillModelContainerComp.SIZE);
      typeRegistry.Register(typeof(Quantum.STimelineComp), Quantum.STimelineComp.SIZE);
      typeRegistry.Register(typeof(Quantum.STimelineModelContainerComp), Quantum.STimelineModelContainerComp.SIZE);
      typeRegistry.Register(typeof(Shape2D), Shape2D.SIZE);
      typeRegistry.Register(typeof(Shape3D), Shape3D.SIZE);
      typeRegistry.Register(typeof(Quantum.SkillComp), Quantum.SkillComp.SIZE);
      typeRegistry.Register(typeof(Quantum.SkillModel), Quantum.SkillModel.SIZE);
      typeRegistry.Register(typeof(Quantum.SkillObj), Quantum.SkillObj.SIZE);
      typeRegistry.Register(typeof(SpringJoint), SpringJoint.SIZE);
      typeRegistry.Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.StatsComp), Quantum.StatsComp.SIZE);
      typeRegistry.Register(typeof(Quantum.TLNode), Quantum.TLNode.SIZE);
      typeRegistry.Register(typeof(Quantum.TLNode_AddBuffToCaster), Quantum.TLNode_AddBuffToCaster.SIZE);
      typeRegistry.Register(typeof(Quantum.TLNode_Log), Quantum.TLNode_Log.SIZE);
      typeRegistry.Register(typeof(Quantum.TLNode_PlayAnim), Quantum.TLNode_PlayAnim.SIZE);
      typeRegistry.Register(typeof(Quantum.TimelineModel), Quantum.TimelineModel.SIZE);
      typeRegistry.Register(typeof(Quantum.TimelineNode), Quantum.TimelineNode.SIZE);
      typeRegistry.Register(typeof(Quantum.TimelineObj), Quantum.TimelineObj.SIZE);
      typeRegistry.Register(typeof(Transform2D), Transform2D.SIZE);
      typeRegistry.Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      typeRegistry.Register(typeof(Transform3D), Transform3D.SIZE);
      typeRegistry.Register(typeof(UTAgent), UTAgent.SIZE);
      typeRegistry.Register(typeof(Quantum.Variable), Quantum.Variable.SIZE);
      typeRegistry.Register(typeof(View), View.SIZE);
      typeRegistry.Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
    static partial void InitComponentTypeIdGen() {
      ComponentTypeId.Reset(ComponentTypeId.BuiltInComponentCount + 18)
        .AddBuiltInComponents()
        .Add<AIBlackboardComponent>(AIBlackboardComponent.Serialize, AIBlackboardComponent.OnAdded, AIBlackboardComponent.OnRemoved, ComponentFlags.None)
        .Add<Quantum.AttribComp>(Quantum.AttribComp.Serialize, Quantum.AttribComp.OnAdded, Quantum.AttribComp.OnRemoved, ComponentFlags.None)
        .Add<BTAgent>(BTAgent.Serialize, BTAgent.OnAdded, BTAgent.OnRemoved, ComponentFlags.None)
        .Add<BotSDKGlobals>(BotSDKGlobals.Serialize, BotSDKGlobals.OnAdded, BotSDKGlobals.OnRemoved, ComponentFlags.Singleton)
        .Add<Quantum.BuffComp>(Quantum.BuffComp.Serialize, Quantum.BuffComp.OnAdded, Quantum.BuffComp.OnRemoved, ComponentFlags.None)
        .Add<Quantum.ForceMoveComp>(Quantum.ForceMoveComp.Serialize, Quantum.ForceMoveComp.OnAdded, Quantum.ForceMoveComp.OnRemoved, ComponentFlags.None)
        .Add<Quantum.Gameplay>(Quantum.Gameplay.Serialize, Quantum.Gameplay.OnAdded, Quantum.Gameplay.OnRemoved, ComponentFlags.Singleton)
        .Add<HFSMAgent>(HFSMAgent.Serialize, HFSMAgent.OnAdded, HFSMAgent.OnRemoved, ComponentFlags.None)
        .Add<Quantum.InputComp>(Quantum.InputComp.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.MoveComp>(Quantum.MoveComp.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerComp>(Quantum.PlayerComp.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.SBuffModelContainerComp>(Quantum.SBuffModelContainerComp.Serialize, null, Quantum.SBuffModelContainerComp.OnRemoved, ComponentFlags.Singleton)
        .Add<Quantum.SSkillModelContainerComp>(Quantum.SSkillModelContainerComp.Serialize, null, Quantum.SSkillModelContainerComp.OnRemoved, ComponentFlags.Singleton)
        .Add<Quantum.STimelineComp>(Quantum.STimelineComp.Serialize, Quantum.STimelineComp.OnAdded, Quantum.STimelineComp.OnRemoved, ComponentFlags.Singleton)
        .Add<Quantum.STimelineModelContainerComp>(Quantum.STimelineModelContainerComp.Serialize, null, Quantum.STimelineModelContainerComp.OnRemoved, ComponentFlags.Singleton)
        .Add<Quantum.SkillComp>(Quantum.SkillComp.Serialize, Quantum.SkillComp.OnAdded, Quantum.SkillComp.OnRemoved, ComponentFlags.None)
        .Add<Quantum.StatsComp>(Quantum.StatsComp.Serialize, null, null, ComponentFlags.None)
        .Add<UTAgent>(UTAgent.Serialize, UTAgent.OnAdded, UTAgent.OnRemoved, ComponentFlags.None)
        .Finish();
    }
    [Preserve()]
    public static void EnsureNotStrippedGen() {
      FramePrinter.EnsureNotStripped();
      FramePrinter.EnsurePrimitiveNotStripped<CallbackFlags>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EGameState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EStateType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ETLNodeType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.QString64>();
      FramePrinter.EnsurePrimitiveNotStripped<QueryOptions>();
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
